#!/bin/sh

#
# This Bash shell script scans for android deviecs via adb and resolves
# the S/N to the MAC address. These MAC addresses are then pushed
# back tot he database.
#
# Chris Ross <chris.ross@controlgroup.com>

# OUTPUT-COLORING
red=$( tput setaf 1 )
green=$( tput setaf 2 )
NC=$( tput setaf 0 )
ESC_SEQ="\x1b["
RCol="${ESC_SEQ}0m"

echo "${green}\nNexus Provisioning Tool\n${RCol}"
# echo "Starting 'adb' ..."

interface="wlan0" # the first argument should be the interface name

fastboot_scan() {
	fastboot_devices=$(fastboot devices | awk 'BEGIN{
		FS="\t"
		OFS=" ";
	}
	{
		print $1
	}
	END{

	}')
	
	echo $fastboot_devices
}

adb_scan() {
	local adb_devices=$(adb devices | awk 'BEGIN{
		FS="\t";
		OFS=" ";
	}
	{
		if (NR != 1) {
			print $1
		}
	}
	END{
		
	}')

	# return the device list string
	echo $adb_devices
}
	
adb_map() {
	if [ $# -eq 0 ]
		then
			return
	fi

	local devices_arr=(${@})

	# loop this device list and for each eval the adb shell command
	for i in "${devices_arr[@]}"
	do
		:
		mac_address=$(adb -s $i shell netcfg | awk 'BEGIN{
			FS=" ";
			OFS=" ";
		}
		{
			if($1 == "'$interface'") print $5
		}
		END{

		}')
		echo $i,$mac_address
	done
}

unlock_bootloader() {
	if [ $# -eq 0 ]
		then
			return
	fi

	local devices_arr=(${@})

	for i in "${devices_arr[@]}"
	do
		:
		# echo $i
		# issue the fastboot command
		local output=$(fastboot -s $i oem unlock | awk 'BEGIN{
			FS="\t";
			OFS=" ";
		}
		{
			print $0
		}
		END{
	
		}')
	done
}

lock_bootloader() {
        if [ $# -eq 0 ]
                then
                        return
        fi

        local devices_arr=(${@})

        for i in "${devices_arr[@]}"
        do
                :
                # echo $i
                # issue the fastboot command
                local output=$(fastboot -s $i oem lock | awk 'BEGIN{
                        FS="\t";
                        OFS=" ";
                }
                {
                        print $0
                }
                END{

                }')
        done
}

# flash system with stock image
flash_image_sequence() {
        if [ $# -lt 3 ]
                then
                        return -1
        fi

        local device=$1
        local dir=$2
	local ver=$3

        fastboot -s $device flash bootloader "${dir}/bootloader-flo-flo-04.02.img"
        fastboot -s $device reboot-bootloader
        sleep 5
	fastboot -s $device flash boot "${dir}/modified/boot-modified-003.img"
	sleep 1
	fastboot -s $device flash recovery "${dir}/image-${dir}/recovery.img"
	sleep 1
	fastboot -s $device flash userdata "${dir}/image-${dir}/userdata.img"
	sleep 1
	fastboot -s $device flash cache "${dir}/image-${dir}/cache.img"
	sleep 1
	fastboot -s $device flash system "${dir}/modified/system-modified-${ver}.img"
	sleep 5
	fastboot reboot-bootloader
}

# flash system with stock image via an update.zip package 
flash_stock() {
	if [ $# -lt 1 ]
		then
			return -1
	elif [ $# -eq 1 ]
		then
			local dir="razor-ktu84p"
			local device=$1
			# local filepath="razor-ktu84p/image-razor-ktu84p.zip"
			fastboot -s $device flash bootloader "${dir}/bootloader-flo-flo-04.02.img"
        		fastboot -s $device reboot-bootloader
        		sleep 5
        		fastboot -s $device flash boot "${dir}/image-${dir}/boot.img"
        		sleep 1
        		fastboot -s $device flash recovery "${dir}/image-${dir}/recovery.img"
        		sleep 1
        		fastboot -s $device flash userdata "${dir}/image-${dir}/userdata.img"
        		sleep 1
        		fastboot -s $device flash cache "${dir}/image-${dir}/cache.img"
        		sleep 1
        		fastboot -s $device flash system "${dir}/image-${dir}/system.img"
        		sleep 5
			fastboot -s $device oem lock
			sleep 1
			fastboot -s $device oem off-mode-charge 1
	elif [$# -eq 2 ]
		then
			local filepath=$2
			local device=$1
			fastboot -w -s $device update "${filepath}"
	fi

}

# launch the registered launcher application and activity
launch_home() {
	if [ $# -eq 0 ]
		then
			return
	fi
	
	local devices_arr=(${@})
	
	for i in "${devices_arr[@]}"
	do
		:
		echo $i 
		adb -s $i shell am start -c android.intent.category.HOME -a android.intent.action.MAIN &
	done
}

loop() {
	# declare -a adb_devices_arr=($(adb_scan))
	declare -a fastboot_devices_arr=($(fastboot_scan))	
	# loop
}

# start the unlock bootloader sequence
sequence_1() {
	if [ $# -eq 0 ]
		then
			local path="razor-ktu84p"
			local ver="003"
		else
			local path=$1
			local ver=$2
	fi

	# fastboot_scan
        declare -a fastboot_devices_arr=($(fastboot_scan))

	# flash in sequence
	for i in "${fastboot_devices_arr[@]}"
	do
		:
		(unlock_bootloader $i && sleep 5 && flash_image_sequence $i $path $ver) && echo "set off-mode-charge : 0 for ${i}" && fastboot -s $i oem off-mode-charge 0
	done
} 

# evaluate the given command
command=$1

if [ "$command" = "provision" ] && [ $# -eq 3 ]
	then
		sequence_1 $2 $3 # sequence_1 razor-ktu84p 003
elif [ "$command" = "gohome" ]
	then
		declare -a adb_devices_arr=($(adb_scan))
		launch_home ${adb_devices_arr[@]}
elif [ "$command" = "oemunlock" ]
	then
		# fastboot_scan
	        declare -a fastboot_devices_arr=($(fastboot_scan))
	
        	# unlock in parallel
        	for i in "${fastboot_devices_arr[@]}"
        	do 
        	        :
        	        unlock_bootloader $i &
        	done
elif [ "$command" = "oemlock" ]
        then
                # fastboot_scan
                declare -a fastboot_devices_arr=($(fastboot_scan))

                # unlock in parallel
                for i in "${fastboot_devices_arr[@]}"
                do
                        :
                        lock_bootloader $i &
                done
elif [ "$command" = "restore" ]
	then
		# fastboot_scan
		declare -a fastboot_devices_arr=($(fastboot_scan))

		# restore
		for i in "${fastboot_devices_arr[@]}"
		do
			:
			flash_stock $i
			
		done
elif [ "$command" = "install" ] && [ $# -eq 2 ]
	then
		# adb_scan
		declare -a adb_devices_arr=($(adb_scan))

		# restore
		for i in "${adb_devices_arr[@]}"
		do
			:
			# install
			adb -s $i install -r $2
			
		done
elif [ "$command" = "reboot" ]
	then
		# adb_scan
		declare -a adb_devices_arr=($(adb_scan))

		# reboot
		for i in "${adb_devices_arr[@]}"
		do
			:
			# install
			adb -s $i reboot
		done		
elif [ "$command" = "aw-install" ] && [ $# -eq 2 ]
	then
		# adb_scan
		declare -a adb_devices_arr=($(adb_scan))

		# restore
		for i in "${adb_devices_arr[@]}"
		do
			:
			# install
			adb -s $i install $2

			# sleep
			sleep 1

			# launch airwatch splash activity
			adb shell am start -n com.airwatch.androidagent/com.airwatch.agent.ui.activity.SplashActivity
			
		done

elif [ "$command" = "launcher-install" ] && [ $# -eq 2 ]
	then
		# adb_scan
		declare -a adb_devices_arr=($(adb_scan))

		# restore
		for i in "${adb_devices_arr[@]}"
		do
			:
			# install
			adb -s $i install $2

			# sleep
			sleep 1

			# wake screen
			adb -s $i shell input keyevent 26

			# unlock screen
			adb -s $i shell input keyevent 82

			# launch the app
			adb -s $i shell am start -n org.crossproduct.kioskhomescreen/.HomeActivity
			
			# call home launcher intent
			adb -s $i shell am start -c android.intent.category.HOME -a android.intent.action.MAIN

			# automate selected EMKI Home as default
			adb -s $i shell input keyevent 19 && adb -s $i shell input keyevent 23 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 21 && adb -s $i shell input keyevent 23
		done

elif [ "$command" = "wifi-toggle-install" ] && [ $# -eq 2 ]
	then
		# adb_scan
		declare -a adb_devices_arr=($(adb_scan))

		# restore
		for i in "${adb_devices_arr[@]}"
		do
			:
			# install
			adb -s $i install $2

			# sleep
			sleep 1

			# launch the app
			adb -s $i shell am start -n com.controlgroup.wifitoggleservice/com.controlgroup.wifitoggleservice.ToggleActivity
			
			# call home launcher intent so we don't see this wifi toggle activity since this version has UI
			adb -s $i shell am start -c android.intent.category.HOME -a android.intent.action.MAIN
		done

elif [ "$command" = "post-config" ]
	then
		# adb_scan
		declare -a adb_devices_arr=($(adb_scan))

		# restore
		for i in "${adb_devices_arr[@]}"
		do
			:
			####### REVISIT THIS IN THE ORDER OF STEPS #########
			# wake screen
			#adb -s $i shell input keyevent 26

			# unlock screen
			#adb -s $i shell input keyevent 82
			######### END REVISIT ##############
			
			# launch the security settings
			adb -s $i shell am start -n com.android.settings/.SecuritySettings
			
			sleep 1
			
			# set screen lock to none
			adb -s $i shell input keyevent 19 && adb -s $i shell input keyevent 22 && adb -s $i shell input keyevent 22
			adb -s $i shell input keyevent 20
			adb -s $i shell input keyevent 66
			sleep 1
			adb -s $i shell input keyevent 66

			# allow install from unknown sources
			adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 66 && adb -s $i shell input keyevent 22 && adb -s $i shell input keyevent 66
		
			# configure display sleep timeout
			adb -s $i shell am start -n com.android.settings/.DisplaySettings

			sleep 1

			# set display sleep timeout to 30 minutes
			adb -s $i shell input keyevent 19 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 66 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 66
		
			# Turn off WiFi Optimization
			adb -s $i shell am start -n com.android.settings/.wifi.WifiSettings

			sleep 1

			# nav to advanced options and toggle Wi-Fi Optimization
			adb -s $i shell input keyevent 22 && adb -s $i shell input keyevent 22 && adb -s $i shell input keyevent 22 && adb -s $i shell input keyevent 22 && adb -s $i shell input keyevent 66 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 66 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 66

			# reset to registered home screen launcher
			adb -s $i shell am start -c android.intent.category.HOME -a android.intent.action.MAIN
		done

elif [ "$command" = "configure-wifi" ] && [ $# -eq 3 ]
	then
		# adb_scan
		declare -a adb_devices_arr=($(adb_scan))

		# configure wifi
		for i in "${adb_devices_arr[@]}"
		do
			:
			# open wifi
			adb -s $i shell am start -a android.intent.action.MAIN -n com.android.settings/.wifi.WifiSettings

			# give it a second to register
			sleep 1

			# turn on wifi (should already be on, comment or uncomment to fix. should find a way to detect this)
			adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 22 && adb -s $i shell input keyevent 22 && adb -s $i shell input keyevent 22 && adb -s $i shell input keyevent 22 && adb -s $i shell input keyevent 21 && adb -s $i shell input keyevent 21 && adb -s $i shell input keyevent 21 && adb -s $i shell input keyevent 66

			# select new network
			adb -s $i shell input keyevent 22 && adb -s $i shell input keyevent 22 && adb -s $i shell input keyevent 66

			# enter network name
			adb -s $i shell input keyboard text $2

			# set security type to WPA/WPA2 psk
			adb -s $i shell input keyevent 61 && adb -s $i shell input keyevent 23 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 20 && adb -s $i shell input keyevent 23

			# set password
			adb -s $i shell input keyevent 61 && adb -s $i shell input keyboard text $3 && adb -s $i shell input keyevent 66
			
			# save
			adb -s $i shell input keyevent 61 && adb -s $i shell input keyevent 61 && adb -s $i shell input keyevent 61 && adb -s $i shell input keyevent 23

			# back out
			adb -s $i shell input keyevent 4
		done
else
	echo "usage: nxpt <command>\n
	commands:
	\tgohome						Direct all connected clients to launch
								their default / configured home launcher
								MAIN activity.

	\toemunlock					Unlock the bootloader of all connected devices
								that have been launched into the bootloader mode.

	\toemlock						Lock the bootloader of all connected devices
								that have been launched into the bootloader mode.

	\tprovision [<directory>] [<version>]		flash all connected devices with fastboot

	\trestore						Restore the device back to factory status (4.4.4 default)

	\tconfigure-wifi <ssid> <password>		Add a network, (currently defaults to WPA/WPA2 PSK)

	\tinstall <path to apk>				Installs the specified apk to all devices.

	\taw-install <path to apk>			Installs the specified Airwatch APK and attempts to launch the main splash screen.

	\tlauncher-install <path to apk>			Installs the specified Custom Launcher APK and configures it as the default.

	\twifi-toggle-install <path to apk>		Installs the specified Wifi Toggle Service APK, launches it to start it,
								and then toggles back to the launcher

	\tpost-config					Perform post configuration settings."
fi


